(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{374:function(s,a,t){s.exports=t.p+"assets/img/git1.5f7bbe8d.png"},428:function(s,a,t){"use strict";t.r(a);var e=t(26),n=Object(e.a)({},(function(){var s=this,a=s.$createElement,e=s._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h3",{attrs:{id:"修改最后一次注释"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#修改最后一次注释"}},[s._v("#")]),s._v(" 修改最后一次注释")]),s._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" commit --amend\n")])])]),e("p",[s._v("出现有注释的界面（你的注释应该显示在第一行）， 输入i进入修改模式，修改好注释后，按Esc键 退出编辑模式，输入:wq保存并退出。")]),s._v(" "),e("p",[s._v("修改倒数第二次的注释：")]),s._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" rebase -i HEAD~2\n")])])]),e("p",[s._v("最后的数字2指的是显示到倒数第几次 比如这个输入的2就会显示倒数的两次注释")]),s._v(" "),e("p",[s._v("想修改哪条注释，就把哪条注释前面的pick换成edit，注意顺序是按时间顺序的，倒数第二条在最后一条上面。保存。")]),s._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" commit --amend\n")])])]),e("p",[s._v("改完之后")]),s._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" rebase --continue\n")])])]),e("p",[s._v("修改上次提交的用户名和邮箱")]),s._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" commit --amend --author"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"junx.zhang001 <junx.zhang001@ke.com>"')]),s._v("\n")])])]),e("p",[s._v("修改之前提交的用户名和邮箱，和改之前的注释一样，就是amend多加参数")]),s._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" rebase -i HEAD~2\n")])])]),e("p",[s._v("最后的数字2指的是显示到倒数第几次 比如这个输入的2就会显示倒数的两次注释")]),s._v(" "),e("p",[s._v("想修改哪条注释，就把哪条注释前面的pick换成edit，注意顺序是按时间顺序的，倒数第二条在最后一条上面。保存。")]),s._v(" "),e("p",[s._v("修改参数加上名字和邮箱")]),s._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" commit --amend --author"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"junx.zhang001 <junx.zhang001@ke.com>"')]),s._v("\n")])])]),e("p",[s._v("改完之后")]),s._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" rebase --continue\n")])])]),e("h3",{attrs:{id:"修改项目的用户名邮箱"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#修改项目的用户名邮箱"}},[s._v("#")]),s._v(" 修改项目的用户名邮箱")]),s._v(" "),e("p",[s._v("命令方式：")]),s._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" config --global user.name "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"AmosZhang"')]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" config --global user.email "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"moonyellow@126.com"')]),s._v("\n")])])]),e("p",[s._v("直接修改文件方式：")]),s._v(" "),e("p",[s._v("打开项目文件夹，进入隐藏文件夹git，编辑config文件。（这样能改变以后提交的用户名和邮箱，改之前的看上面）")]),s._v(" "),e("div",{staticClass:"language-text extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("[user]\nname = Amos Zhang\nemail = moonyellow@126.com\n")])])]),e("h3",{attrs:{id:"合并两次已push的commit"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#合并两次已push的commit"}},[s._v("#")]),s._v(" 合并两次已push的commit")]),s._v(" "),e("p",[s._v("有时候需要把近几次的commit合并成一个，比如提交了一个修改，后来发现有问题，fix完了又提交一次，这时可能会想把这两次commit合并为一个。下面这个命令可以实现：")]),s._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" rebase -i HEAD~2\n")])])]),e("p",[s._v("敲完这个命令并回车后，会出现类似下图所示界面：")]),s._v(" "),e("img",{attrs:{src:t(374),width:"994",height:"356"}}),s._v(" "),e("p",[s._v("根据提示，把第二个“pick”改成“squash”，这样就可以把第二个commit合并到到第一个里，修改并保存后会出修改提交信息的界面。")]),s._v(" "),e("p",[s._v("这个界面会把两次commit的comments列出来，你可以任意修改成想要的注释，然后保存即可。")]),s._v(" "),e("p",[s._v("然后强制推到远端")]),s._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" push -f\n")])])]),e("p",[s._v("各种原因merges失败\nYou have not concluded your merge")]),s._v(" "),e("p",[s._v("撤回merge动作")]),s._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" merge --abort\n")])])]),e("h3",{attrs:{id:"lf-crlf"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#lf-crlf"}},[s._v("#")]),s._v(" lf crlf")]),s._v(" "),e("p",[s._v("设置系统换行符转换\nGit中CRLF与LF的转换\n1.换行符在不同的操作系统上的表示\n首先要理解的一点是，对于不同的操作系统，对于换行符的表示是不一样的。也就是说当我们在编辑一个文件，在键盘上按下回车键的时候，对于不同的操作系统保存到文件中的换行符是不一样的。见下表：")]),s._v(" "),e("p",[s._v("CR:表示回车\\r\nLF:表示换行\\n\nCRLF:表示回车换行\\r\\n")]),s._v(" "),e("p",[s._v("敲下回车键，不同的操作系统保存到文件中的值：\nWindows：使用的是CRLF ==> 即\\r\\n，文件中保存的是\\r\\n\nLinux/Unix: 使用的是LF ==> 即\\n，文件中保存的是\\n\nMac OS: 使用的是CR ==> 即\\r，文件中保存的是\\r\nMac OS X系统：使用的是LF ==> 即\\n，文件中保存的是\\n（Mac OS X已经改成和Unix/Linx一样使用LF）\n问题: 既然不同的操作系统，对于换行符使用不同的表示形式，如果一个团队在开发一个共同的项目，如果你使用的是windows系统，而你的小伙伴用的是Mac的话，当你们使用git协同开发软件时，就会出现换行符不统一的问题。")]),s._v(" "),e("p",[s._v("虽然对于不同的操作系统，默认的换行符的表示方法不一样，但是编辑器是可以设置在敲下回车键的时候保存的换行符是什么的，比如常用的vscode就可以进行设置。直接点击编辑器右下角的LF或者CRLF，出现如下图所示的设置，直接选择即可。在设置完成之后，在敲回车键，保存在文件中的换行符就是你设置的（CRLF或者是LF，设置什么就是什么）。")]),s._v(" "),e("p",[s._v("2.Git会自动对换行符进行转换\nGit为了解决上面提出的问题，会自动对换行符进行转换。转换的方案有3种：")]),s._v(" "),e("p",[s._v("在提交时将CRLF转换为LF，在拉取（检出checkout）时将UNIX换行符（LF）替换成CRLF。（Windows系统推荐使用，我们在windows上安装git的时候，如果一路next，默认是使用这个方案）\n在提交时将CRLF转换为LF，在拉取（检出checkout）时不进行转换。（Linux/Unix和Mac OS和Mac OS X推荐使用，在Unix或者类Unix操作系统上安装git，默认使用这种方案）\n不进行转换（这种方案对于跨平台项目不推荐使用）。\n可以发现，如果不使用第3种方案，那么在Git仓库（包括本地仓库和GitHub远程仓库）中保存的文件的换行符都是LF表示的。")]),s._v(" "),e("p",[s._v("3.自己指定换行符转换方案\n我们自己在开发过程中，是可以修改/设置Git的换行符转换方案的。修改/设置的方法有2种。")]),s._v(" "),e("p",[s._v("3.1 通过Git的全局配置进行修改\n设置autoclf属性，在控制台直接运行如下的一条命令就可以设置了：")]),s._v(" "),e("p",[s._v("// 提交时转换为LF，检出时转换为CRLF\ngit config --global core.autocrlf true")]),s._v(" "),e("p",[s._v("// 提交时转换为LF，检出时不转换\ngit config --global core.autocrlf input")]),s._v(" "),e("p",[s._v("// 提交检出均不转换\ngit config --global core.autocrlf false")])])}),[],!1,null,null,null);a.default=n.exports}}]);